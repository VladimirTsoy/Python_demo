# -*- coding: utf-8 -*-

import simple_draw as sd
sd.resolution = (1300, 600)

# На основе кода из практической части реализовать снегопад:
# - создать списки данных для отрисовки N снежинок
# - нарисовать падение этих N снежинок
# - создать список рандомных длин лучей снежинок (от 10 до 100) и пусть все снежинки будут разные

N = 20

# Пригодятся функции
# sd.get_point()
# sd.snowflake()
# sd.sleep()
# sd.random_number()
# sd.user_want_exit()


# ********************************************************************
# ********** Снегопад с детерминированным размером снежинок **********

# Инициализируем параметры снежинок. Размер снежинок будет одинаковым
snowflake_param = []
# length_snow = 30
# for _ in range(N):
#     x = sd.random_number(100, 1200)
#     y = sd.random_number(500, 600)
#     snowflake_param.append([x, y, length_snow])
#
#
# # Рисуем снегопад
# delta_y = -10
# while True:
#     sd.clear_screen()
#
#     for i in range(N):
#
#         # Достаём параметры снежинки
#         x = snowflake_param[i][0]
#         y = snowflake_param[i][1]
#         length = snowflake_param[i][2]
#         point = sd.get_point(x, y)
#
#         # Печатаем снежинку
#         sd.snowflake(point, length)
#
#         # Изменяем координаты снежинки
#         y += delta_y
#         snowflake_param[i] = [x, y, length]
#
#         if y < 50:
#             snowflake_param[i][1] = 600
#
#     sd.sleep(0.1)
#
#     if sd.user_want_exit():
#         break


# ****************************************************************************
# Снегопад со случайным размером снежинок и случайным отклонением влево/вправо.
# ****************************************************************************

# Инициализируем параметры снежинок
# snowflake_param.clear()
for _ in range(N):
    x = sd.random_number(100, 1200)
    y = sd.random_number(500, 600)
    length_snow = sd.random_number(10, 100)
    snowflake_param.append([x, y, length_snow])


def draw_snowflake(x_, y_, length_, color_=sd.COLOR_WHITE):
    point_snow = sd.get_point(x_, y_)
    sd.snowflake(point_snow, length_, color_)


delta_y = -10
delta_x = 8
delta_snowdrift = 1     # Высота слоя выпадения снега
h0_snowdrift = 10       # Начальная высота, на которой будет накапливаться снег
while True:
    sd.start_drawing()      # Начало отрисовки

    for i in range(N):
        # Достаём параметры снежинки и печатаем её цветом фона
        x = snowflake_param[i][0]
        y = snowflake_param[i][1]
        length = snowflake_param[i][2]
        draw_snowflake(x, y, length, sd.background_color)

        # Изменяем координаты снежинки и рисуем её белым цветом
        x += sd.random_number(-delta_x, delta_x)
        y += delta_y
        draw_snowflake(x, y, length)
        if y < h0_snowdrift:
            x = sd.random_number(100, 1200)
            y = sd.random_number(500, 600)
            # Это лишнее
            # snowflake_param[i][0] = x
            # snowflake_param[i][1] = y
        snowflake_param[i] = [x, y, length]
    h0_snowdrift += delta_snowdrift

    sd.finish_drawing()     # Конец отрисовки
    sd.sleep(0.1)

    if sd.user_want_exit() or h0_snowdrift > 550:
        break

sd.pause()

# Примерный алгоритм отрисовки снежинок
#   навсегда
#     очистка экрана
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       изменить координата_у и запомнить её в списке по индексу
#       создать точку отрисовки снежинки по координатам
#       нарисовать снежинку белым цветом в этой точке
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл


# Часть 2 (делается после зачета первой части)
#
# Ускорить отрисовку снегопада
# - убрать clear_screen() из цикла: полная очистка всего экрана - долгая операция.
# - использовать хак для стирания старого положения снежинки:
#       отрисуем её заново на старом месте, но цветом фона (sd.background_color) и она исчезнет!
# - использовать функции sd.start_drawing() и sd.finish_drawing()
#       для начала/окончания отрисовки кадра анимации
# - между start_drawing и finish_drawing библиотека sd ничего не выводит на экран,
#       а сохраняет нарисованное в промежуточном буфере, за счет чего достигается ускорение анимации
# - в момент вызова finish_drawing все нарисованное в буфере разом покажется на экране
#
# Примерный алгоритм ускоренной отрисовки снежинок
#   навсегда
#     начать рисование кадра
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       создать точку отрисовки снежинки
#       нарисовать снежинку цветом фона
#       изменить координата_у и запомнить её в списке по индексу
#       создать новую точку отрисовки снежинки
#       нарисовать снежинку на новом месте белым цветом
#     закончить рисование кадра
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл


# Усложненное задание (делать по желанию)
# - сделать рандомные отклонения вправо/влево при каждом шаге
# - сделать сугоб внизу экрана - если снежинка долетает до низа, оставлять её там,
#   и добавлять новую снежинку
# Результат решения см https://youtu.be/XBx0JtxHiLg

# зачет!
